// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/haguru/sasuke/internal/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// NewMockDBClient creates a new instance of MockDBClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDBClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDBClient {
	mock := &MockDBClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDBClient is an autogenerated mock type for the DBClient type
type MockDBClient struct {
	mock.Mock
}

type MockDBClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDBClient) EXPECT() *MockDBClient_Expecter {
	return &MockDBClient_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function for the type MockDBClient
func (_mock *MockDBClient) Connect(ctx context.Context, dsn string) error {
	ret := _mock.Called(ctx, dsn)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, dsn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBClient_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockDBClient_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - ctx context.Context
//   - dsn string
func (_e *MockDBClient_Expecter) Connect(ctx interface{}, dsn interface{}) *MockDBClient_Connect_Call {
	return &MockDBClient_Connect_Call{Call: _e.mock.On("Connect", ctx, dsn)}
}

func (_c *MockDBClient_Connect_Call) Run(run func(ctx context.Context, dsn string)) *MockDBClient_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBClient_Connect_Call) Return(err error) *MockDBClient_Connect_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBClient_Connect_Call) RunAndReturn(run func(ctx context.Context, dsn string) error) *MockDBClient_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMany provides a mock function for the type MockDBClient
func (_mock *MockDBClient) DeleteMany(ctx context.Context, collectionName string, filter interfaces.Document) (int64, error) {
	ret := _mock.Called(ctx, collectionName, filter)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMany")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, interfaces.Document) (int64, error)); ok {
		return returnFunc(ctx, collectionName, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, interfaces.Document) int64); ok {
		r0 = returnFunc(ctx, collectionName, filter)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, interfaces.Document) error); ok {
		r1 = returnFunc(ctx, collectionName, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBClient_DeleteMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMany'
type MockDBClient_DeleteMany_Call struct {
	*mock.Call
}

// DeleteMany is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionName string
//   - filter interfaces.Document
func (_e *MockDBClient_Expecter) DeleteMany(ctx interface{}, collectionName interface{}, filter interface{}) *MockDBClient_DeleteMany_Call {
	return &MockDBClient_DeleteMany_Call{Call: _e.mock.On("DeleteMany", ctx, collectionName, filter)}
}

func (_c *MockDBClient_DeleteMany_Call) Run(run func(ctx context.Context, collectionName string, filter interfaces.Document)) *MockDBClient_DeleteMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 interfaces.Document
		if args[2] != nil {
			arg2 = args[2].(interfaces.Document)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBClient_DeleteMany_Call) Return(n int64, err error) *MockDBClient_DeleteMany_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockDBClient_DeleteMany_Call) RunAndReturn(run func(ctx context.Context, collectionName string, filter interfaces.Document) (int64, error)) *MockDBClient_DeleteMany_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOne provides a mock function for the type MockDBClient
func (_mock *MockDBClient) DeleteOne(ctx context.Context, collectionName string, filter interfaces.Document) (int64, error) {
	ret := _mock.Called(ctx, collectionName, filter)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOne")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, interfaces.Document) (int64, error)); ok {
		return returnFunc(ctx, collectionName, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, interfaces.Document) int64); ok {
		r0 = returnFunc(ctx, collectionName, filter)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, interfaces.Document) error); ok {
		r1 = returnFunc(ctx, collectionName, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBClient_DeleteOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOne'
type MockDBClient_DeleteOne_Call struct {
	*mock.Call
}

// DeleteOne is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionName string
//   - filter interfaces.Document
func (_e *MockDBClient_Expecter) DeleteOne(ctx interface{}, collectionName interface{}, filter interface{}) *MockDBClient_DeleteOne_Call {
	return &MockDBClient_DeleteOne_Call{Call: _e.mock.On("DeleteOne", ctx, collectionName, filter)}
}

func (_c *MockDBClient_DeleteOne_Call) Run(run func(ctx context.Context, collectionName string, filter interfaces.Document)) *MockDBClient_DeleteOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 interfaces.Document
		if args[2] != nil {
			arg2 = args[2].(interfaces.Document)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBClient_DeleteOne_Call) Return(n int64, err error) *MockDBClient_DeleteOne_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockDBClient_DeleteOne_Call) RunAndReturn(run func(ctx context.Context, collectionName string, filter interfaces.Document) (int64, error)) *MockDBClient_DeleteOne_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function for the type MockDBClient
func (_mock *MockDBClient) Disconnect(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBClient_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type MockDBClient_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDBClient_Expecter) Disconnect(ctx interface{}) *MockDBClient_Disconnect_Call {
	return &MockDBClient_Disconnect_Call{Call: _e.mock.On("Disconnect", ctx)}
}

func (_c *MockDBClient_Disconnect_Call) Run(run func(ctx context.Context)) *MockDBClient_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBClient_Disconnect_Call) Return(err error) *MockDBClient_Disconnect_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBClient_Disconnect_Call) RunAndReturn(run func(ctx context.Context) error) *MockDBClient_Disconnect_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureSchema provides a mock function for the type MockDBClient
func (_mock *MockDBClient) EnsureSchema(ctx context.Context, name string, schema interfaces.Document) error {
	ret := _mock.Called(ctx, name, schema)

	if len(ret) == 0 {
		panic("no return value specified for EnsureSchema")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, interfaces.Document) error); ok {
		r0 = returnFunc(ctx, name, schema)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBClient_EnsureSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureSchema'
type MockDBClient_EnsureSchema_Call struct {
	*mock.Call
}

// EnsureSchema is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - schema interfaces.Document
func (_e *MockDBClient_Expecter) EnsureSchema(ctx interface{}, name interface{}, schema interface{}) *MockDBClient_EnsureSchema_Call {
	return &MockDBClient_EnsureSchema_Call{Call: _e.mock.On("EnsureSchema", ctx, name, schema)}
}

func (_c *MockDBClient_EnsureSchema_Call) Run(run func(ctx context.Context, name string, schema interfaces.Document)) *MockDBClient_EnsureSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 interfaces.Document
		if args[2] != nil {
			arg2 = args[2].(interfaces.Document)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBClient_EnsureSchema_Call) Return(err error) *MockDBClient_EnsureSchema_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBClient_EnsureSchema_Call) RunAndReturn(run func(ctx context.Context, name string, schema interfaces.Document) error) *MockDBClient_EnsureSchema_Call {
	_c.Call.Return(run)
	return _c
}

// FindMany provides a mock function for the type MockDBClient
func (_mock *MockDBClient) FindMany(ctx context.Context, collectionName string, filter interfaces.Document) ([]interfaces.Document, error) {
	ret := _mock.Called(ctx, collectionName, filter)

	if len(ret) == 0 {
		panic("no return value specified for FindMany")
	}

	var r0 []interfaces.Document
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, interfaces.Document) ([]interfaces.Document, error)); ok {
		return returnFunc(ctx, collectionName, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, interfaces.Document) []interfaces.Document); ok {
		r0 = returnFunc(ctx, collectionName, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interfaces.Document)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, interfaces.Document) error); ok {
		r1 = returnFunc(ctx, collectionName, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBClient_FindMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMany'
type MockDBClient_FindMany_Call struct {
	*mock.Call
}

// FindMany is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionName string
//   - filter interfaces.Document
func (_e *MockDBClient_Expecter) FindMany(ctx interface{}, collectionName interface{}, filter interface{}) *MockDBClient_FindMany_Call {
	return &MockDBClient_FindMany_Call{Call: _e.mock.On("FindMany", ctx, collectionName, filter)}
}

func (_c *MockDBClient_FindMany_Call) Run(run func(ctx context.Context, collectionName string, filter interfaces.Document)) *MockDBClient_FindMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 interfaces.Document
		if args[2] != nil {
			arg2 = args[2].(interfaces.Document)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBClient_FindMany_Call) Return(documents []interfaces.Document, err error) *MockDBClient_FindMany_Call {
	_c.Call.Return(documents, err)
	return _c
}

func (_c *MockDBClient_FindMany_Call) RunAndReturn(run func(ctx context.Context, collectionName string, filter interfaces.Document) ([]interfaces.Document, error)) *MockDBClient_FindMany_Call {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function for the type MockDBClient
func (_mock *MockDBClient) FindOne(ctx context.Context, collectionName string, filter interfaces.Document, result interfaces.Document) error {
	ret := _mock.Called(ctx, collectionName, filter, result)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, interfaces.Document, interfaces.Document) error); ok {
		r0 = returnFunc(ctx, collectionName, filter, result)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBClient_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type MockDBClient_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionName string
//   - filter interfaces.Document
//   - result interfaces.Document
func (_e *MockDBClient_Expecter) FindOne(ctx interface{}, collectionName interface{}, filter interface{}, result interface{}) *MockDBClient_FindOne_Call {
	return &MockDBClient_FindOne_Call{Call: _e.mock.On("FindOne", ctx, collectionName, filter, result)}
}

func (_c *MockDBClient_FindOne_Call) Run(run func(ctx context.Context, collectionName string, filter interfaces.Document, result interfaces.Document)) *MockDBClient_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 interfaces.Document
		if args[2] != nil {
			arg2 = args[2].(interfaces.Document)
		}
		var arg3 interfaces.Document
		if args[3] != nil {
			arg3 = args[3].(interfaces.Document)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockDBClient_FindOne_Call) Return(err error) *MockDBClient_FindOne_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBClient_FindOne_Call) RunAndReturn(run func(ctx context.Context, collectionName string, filter interfaces.Document, result interfaces.Document) error) *MockDBClient_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// InsertOne provides a mock function for the type MockDBClient
func (_mock *MockDBClient) InsertOne(ctx context.Context, collectionName string, document interfaces.Document) (interface{}, error) {
	ret := _mock.Called(ctx, collectionName, document)

	if len(ret) == 0 {
		panic("no return value specified for InsertOne")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, interfaces.Document) (interface{}, error)); ok {
		return returnFunc(ctx, collectionName, document)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, interfaces.Document) interface{}); ok {
		r0 = returnFunc(ctx, collectionName, document)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, interfaces.Document) error); ok {
		r1 = returnFunc(ctx, collectionName, document)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBClient_InsertOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOne'
type MockDBClient_InsertOne_Call struct {
	*mock.Call
}

// InsertOne is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionName string
//   - document interfaces.Document
func (_e *MockDBClient_Expecter) InsertOne(ctx interface{}, collectionName interface{}, document interface{}) *MockDBClient_InsertOne_Call {
	return &MockDBClient_InsertOne_Call{Call: _e.mock.On("InsertOne", ctx, collectionName, document)}
}

func (_c *MockDBClient_InsertOne_Call) Run(run func(ctx context.Context, collectionName string, document interfaces.Document)) *MockDBClient_InsertOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 interfaces.Document
		if args[2] != nil {
			arg2 = args[2].(interfaces.Document)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBClient_InsertOne_Call) Return(ifaceVal interface{}, err error) *MockDBClient_InsertOne_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockDBClient_InsertOne_Call) RunAndReturn(run func(ctx context.Context, collectionName string, document interfaces.Document) (interface{}, error)) *MockDBClient_InsertOne_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type MockDBClient
func (_mock *MockDBClient) Ping(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBClient_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockDBClient_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDBClient_Expecter) Ping(ctx interface{}) *MockDBClient_Ping_Call {
	return &MockDBClient_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MockDBClient_Ping_Call) Run(run func(ctx context.Context)) *MockDBClient_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBClient_Ping_Call) Return(err error) *MockDBClient_Ping_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBClient_Ping_Call) RunAndReturn(run func(ctx context.Context) error) *MockDBClient_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOne provides a mock function for the type MockDBClient
func (_mock *MockDBClient) UpdateOne(ctx context.Context, collectionName string, filter interfaces.Document, update interfaces.Document) (int64, error) {
	ret := _mock.Called(ctx, collectionName, filter, update)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOne")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, interfaces.Document, interfaces.Document) (int64, error)); ok {
		return returnFunc(ctx, collectionName, filter, update)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, interfaces.Document, interfaces.Document) int64); ok {
		r0 = returnFunc(ctx, collectionName, filter, update)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, interfaces.Document, interfaces.Document) error); ok {
		r1 = returnFunc(ctx, collectionName, filter, update)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBClient_UpdateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOne'
type MockDBClient_UpdateOne_Call struct {
	*mock.Call
}

// UpdateOne is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionName string
//   - filter interfaces.Document
//   - update interfaces.Document
func (_e *MockDBClient_Expecter) UpdateOne(ctx interface{}, collectionName interface{}, filter interface{}, update interface{}) *MockDBClient_UpdateOne_Call {
	return &MockDBClient_UpdateOne_Call{Call: _e.mock.On("UpdateOne", ctx, collectionName, filter, update)}
}

func (_c *MockDBClient_UpdateOne_Call) Run(run func(ctx context.Context, collectionName string, filter interfaces.Document, update interfaces.Document)) *MockDBClient_UpdateOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 interfaces.Document
		if args[2] != nil {
			arg2 = args[2].(interfaces.Document)
		}
		var arg3 interfaces.Document
		if args[3] != nil {
			arg3 = args[3].(interfaces.Document)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockDBClient_UpdateOne_Call) Return(n int64, err error) *MockDBClient_UpdateOne_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockDBClient_UpdateOne_Call) RunAndReturn(run func(ctx context.Context, collectionName string, filter interfaces.Document, update interfaces.Document) (int64, error)) *MockDBClient_UpdateOne_Call {
	_c.Call.Return(run)
	return _c
}

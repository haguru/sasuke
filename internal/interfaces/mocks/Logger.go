// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/haguru/sasuke/internal/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// NewMockLogger creates a new instance of MockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogger {
	mock := &MockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

type MockLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogger) EXPECT() *MockLogger_Expecter {
	return &MockLogger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function for the type MockLogger
func (_mock *MockLogger) Debug(msg string, keyvals ...interface{}) {
	if len(keyvals) > 0 {
		_mock.Called(msg, keyvals)
	} else {
		_mock.Called(msg)
	}

	return
}

// MockLogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type MockLogger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - msg string
//   - keyvals ...interface{}
func (_e *MockLogger_Expecter) Debug(msg interface{}, keyvals ...interface{}) *MockLogger_Debug_Call {
	return &MockLogger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{msg}, keyvals...)...)}
}

func (_c *MockLogger_Debug_Call) Run(run func(msg string, keyvals ...interface{})) *MockLogger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		var variadicArgs []interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLogger_Debug_Call) Return() *MockLogger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Debug_Call) RunAndReturn(run func(msg string, keyvals ...interface{})) *MockLogger_Debug_Call {
	_c.Run(run)
	return _c
}

// Error provides a mock function for the type MockLogger
func (_mock *MockLogger) Error(msg string, keyvals ...interface{}) {
	if len(keyvals) > 0 {
		_mock.Called(msg, keyvals)
	} else {
		_mock.Called(msg)
	}

	return
}

// MockLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - msg string
//   - keyvals ...interface{}
func (_e *MockLogger_Expecter) Error(msg interface{}, keyvals ...interface{}) *MockLogger_Error_Call {
	return &MockLogger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{msg}, keyvals...)...)}
}

func (_c *MockLogger_Error_Call) Run(run func(msg string, keyvals ...interface{})) *MockLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		var variadicArgs []interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLogger_Error_Call) Return() *MockLogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Error_Call) RunAndReturn(run func(msg string, keyvals ...interface{})) *MockLogger_Error_Call {
	_c.Run(run)
	return _c
}

// Info provides a mock function for the type MockLogger
func (_mock *MockLogger) Info(msg string, keyvals ...interface{}) {
	if len(keyvals) > 0 {
		_mock.Called(msg, keyvals)
	} else {
		_mock.Called(msg)
	}

	return
}

// MockLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - msg string
//   - keyvals ...interface{}
func (_e *MockLogger_Expecter) Info(msg interface{}, keyvals ...interface{}) *MockLogger_Info_Call {
	return &MockLogger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{msg}, keyvals...)...)}
}

func (_c *MockLogger_Info_Call) Run(run func(msg string, keyvals ...interface{})) *MockLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		var variadicArgs []interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLogger_Info_Call) Return() *MockLogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Info_Call) RunAndReturn(run func(msg string, keyvals ...interface{})) *MockLogger_Info_Call {
	_c.Run(run)
	return _c
}

// SetLevel provides a mock function for the type MockLogger
func (_mock *MockLogger) SetLevel(level string) {
	_mock.Called(level)
	return
}

// MockLogger_SetLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLevel'
type MockLogger_SetLevel_Call struct {
	*mock.Call
}

// SetLevel is a helper method to define mock.On call
//   - level string
func (_e *MockLogger_Expecter) SetLevel(level interface{}) *MockLogger_SetLevel_Call {
	return &MockLogger_SetLevel_Call{Call: _e.mock.On("SetLevel", level)}
}

func (_c *MockLogger_SetLevel_Call) Run(run func(level string)) *MockLogger_SetLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLogger_SetLevel_Call) Return() *MockLogger_SetLevel_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_SetLevel_Call) RunAndReturn(run func(level string)) *MockLogger_SetLevel_Call {
	_c.Run(run)
	return _c
}

// Warn provides a mock function for the type MockLogger
func (_mock *MockLogger) Warn(msg string, keyvals ...interface{}) {
	if len(keyvals) > 0 {
		_mock.Called(msg, keyvals)
	} else {
		_mock.Called(msg)
	}

	return
}

// MockLogger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type MockLogger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - msg string
//   - keyvals ...interface{}
func (_e *MockLogger_Expecter) Warn(msg interface{}, keyvals ...interface{}) *MockLogger_Warn_Call {
	return &MockLogger_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{msg}, keyvals...)...)}
}

func (_c *MockLogger_Warn_Call) Run(run func(msg string, keyvals ...interface{})) *MockLogger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		var variadicArgs []interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLogger_Warn_Call) Return() *MockLogger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Warn_Call) RunAndReturn(run func(msg string, keyvals ...interface{})) *MockLogger_Warn_Call {
	_c.Run(run)
	return _c
}

// WithContext provides a mock function for the type MockLogger
func (_mock *MockLogger) WithContext(ctx map[string]interface{}) interfaces.Logger {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WithContext")
	}

	var r0 interfaces.Logger
	if returnFunc, ok := ret.Get(0).(func(map[string]interface{}) interfaces.Logger); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Logger)
		}
	}
	return r0
}

// MockLogger_WithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithContext'
type MockLogger_WithContext_Call struct {
	*mock.Call
}

// WithContext is a helper method to define mock.On call
//   - ctx map[string]interface{}
func (_e *MockLogger_Expecter) WithContext(ctx interface{}) *MockLogger_WithContext_Call {
	return &MockLogger_WithContext_Call{Call: _e.mock.On("WithContext", ctx)}
}

func (_c *MockLogger_WithContext_Call) Run(run func(ctx map[string]interface{})) *MockLogger_WithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 map[string]interface{}
		if args[0] != nil {
			arg0 = args[0].(map[string]interface{})
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLogger_WithContext_Call) Return(logger interfaces.Logger) *MockLogger_WithContext_Call {
	_c.Call.Return(logger)
	return _c
}

func (_c *MockLogger_WithContext_Call) RunAndReturn(run func(ctx map[string]interface{}) interfaces.Logger) *MockLogger_WithContext_Call {
	_c.Call.Return(run)
	return _c
}

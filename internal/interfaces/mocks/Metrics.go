// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/prometheus/client_golang/prometheus"
	mock "github.com/stretchr/testify/mock"
)

// NewMockMetrics creates a new instance of MockMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetrics {
	mock := &MockMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMetrics is an autogenerated mock type for the Metrics type
type MockMetrics struct {
	mock.Mock
}

type MockMetrics_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetrics) EXPECT() *MockMetrics_Expecter {
	return &MockMetrics_Expecter{mock: &_m.Mock}
}

// AddCounter provides a mock function for the type MockMetrics
func (_mock *MockMetrics) AddCounter(name string, value float64) {
	_mock.Called(name, value)
	return
}

// MockMetrics_AddCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCounter'
type MockMetrics_AddCounter_Call struct {
	*mock.Call
}

// AddCounter is a helper method to define mock.On call
//   - name string
//   - value float64
func (_e *MockMetrics_Expecter) AddCounter(name interface{}, value interface{}) *MockMetrics_AddCounter_Call {
	return &MockMetrics_AddCounter_Call{Call: _e.mock.On("AddCounter", name, value)}
}

func (_c *MockMetrics_AddCounter_Call) Run(run func(name string, value float64)) *MockMetrics_AddCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 float64
		if args[1] != nil {
			arg1 = args[1].(float64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetrics_AddCounter_Call) Return() *MockMetrics_AddCounter_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_AddCounter_Call) RunAndReturn(run func(name string, value float64)) *MockMetrics_AddCounter_Call {
	_c.Run(run)
	return _c
}

// AddCounterVec provides a mock function for the type MockMetrics
func (_mock *MockMetrics) AddCounterVec(name string, value float64, labels ...string) {
	if len(labels) > 0 {
		_mock.Called(name, value, labels)
	} else {
		_mock.Called(name, value)
	}

	return
}

// MockMetrics_AddCounterVec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCounterVec'
type MockMetrics_AddCounterVec_Call struct {
	*mock.Call
}

// AddCounterVec is a helper method to define mock.On call
//   - name string
//   - value float64
//   - labels ...string
func (_e *MockMetrics_Expecter) AddCounterVec(name interface{}, value interface{}, labels ...interface{}) *MockMetrics_AddCounterVec_Call {
	return &MockMetrics_AddCounterVec_Call{Call: _e.mock.On("AddCounterVec",
		append([]interface{}{name, value}, labels...)...)}
}

func (_c *MockMetrics_AddCounterVec_Call) Run(run func(name string, value float64, labels ...string)) *MockMetrics_AddCounterVec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 float64
		if args[1] != nil {
			arg1 = args[1].(float64)
		}
		var arg2 []string
		var variadicArgs []string
		if len(args) > 2 {
			variadicArgs = args[2].([]string)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockMetrics_AddCounterVec_Call) Return() *MockMetrics_AddCounterVec_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_AddCounterVec_Call) RunAndReturn(run func(name string, value float64, labels ...string)) *MockMetrics_AddCounterVec_Call {
	_c.Run(run)
	return _c
}

// AddGauge provides a mock function for the type MockMetrics
func (_mock *MockMetrics) AddGauge(name string, value float64) {
	_mock.Called(name, value)
	return
}

// MockMetrics_AddGauge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGauge'
type MockMetrics_AddGauge_Call struct {
	*mock.Call
}

// AddGauge is a helper method to define mock.On call
//   - name string
//   - value float64
func (_e *MockMetrics_Expecter) AddGauge(name interface{}, value interface{}) *MockMetrics_AddGauge_Call {
	return &MockMetrics_AddGauge_Call{Call: _e.mock.On("AddGauge", name, value)}
}

func (_c *MockMetrics_AddGauge_Call) Run(run func(name string, value float64)) *MockMetrics_AddGauge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 float64
		if args[1] != nil {
			arg1 = args[1].(float64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetrics_AddGauge_Call) Return() *MockMetrics_AddGauge_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_AddGauge_Call) RunAndReturn(run func(name string, value float64)) *MockMetrics_AddGauge_Call {
	_c.Run(run)
	return _c
}

// DecGauge provides a mock function for the type MockMetrics
func (_mock *MockMetrics) DecGauge(name string) {
	_mock.Called(name)
	return
}

// MockMetrics_DecGauge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecGauge'
type MockMetrics_DecGauge_Call struct {
	*mock.Call
}

// DecGauge is a helper method to define mock.On call
//   - name string
func (_e *MockMetrics_Expecter) DecGauge(name interface{}) *MockMetrics_DecGauge_Call {
	return &MockMetrics_DecGauge_Call{Call: _e.mock.On("DecGauge", name)}
}

func (_c *MockMetrics_DecGauge_Call) Run(run func(name string)) *MockMetrics_DecGauge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetrics_DecGauge_Call) Return() *MockMetrics_DecGauge_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_DecGauge_Call) RunAndReturn(run func(name string)) *MockMetrics_DecGauge_Call {
	_c.Run(run)
	return _c
}

// DecGaugeVec provides a mock function for the type MockMetrics
func (_mock *MockMetrics) DecGaugeVec(name string, labels ...string) {
	if len(labels) > 0 {
		_mock.Called(name, labels)
	} else {
		_mock.Called(name)
	}

	return
}

// MockMetrics_DecGaugeVec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecGaugeVec'
type MockMetrics_DecGaugeVec_Call struct {
	*mock.Call
}

// DecGaugeVec is a helper method to define mock.On call
//   - name string
//   - labels ...string
func (_e *MockMetrics_Expecter) DecGaugeVec(name interface{}, labels ...interface{}) *MockMetrics_DecGaugeVec_Call {
	return &MockMetrics_DecGaugeVec_Call{Call: _e.mock.On("DecGaugeVec",
		append([]interface{}{name}, labels...)...)}
}

func (_c *MockMetrics_DecGaugeVec_Call) Run(run func(name string, labels ...string)) *MockMetrics_DecGaugeVec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []string
		var variadicArgs []string
		if len(args) > 1 {
			variadicArgs = args[1].([]string)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockMetrics_DecGaugeVec_Call) Return() *MockMetrics_DecGaugeVec_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_DecGaugeVec_Call) RunAndReturn(run func(name string, labels ...string)) *MockMetrics_DecGaugeVec_Call {
	_c.Run(run)
	return _c
}

// GetRegistry provides a mock function for the type MockMetrics
func (_mock *MockMetrics) GetRegistry() *prometheus.Registry {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRegistry")
	}

	var r0 *prometheus.Registry
	if returnFunc, ok := ret.Get(0).(func() *prometheus.Registry); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prometheus.Registry)
		}
	}
	return r0
}

// MockMetrics_GetRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegistry'
type MockMetrics_GetRegistry_Call struct {
	*mock.Call
}

// GetRegistry is a helper method to define mock.On call
func (_e *MockMetrics_Expecter) GetRegistry() *MockMetrics_GetRegistry_Call {
	return &MockMetrics_GetRegistry_Call{Call: _e.mock.On("GetRegistry")}
}

func (_c *MockMetrics_GetRegistry_Call) Run(run func()) *MockMetrics_GetRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMetrics_GetRegistry_Call) Return(registry *prometheus.Registry) *MockMetrics_GetRegistry_Call {
	_c.Call.Return(registry)
	return _c
}

func (_c *MockMetrics_GetRegistry_Call) RunAndReturn(run func() *prometheus.Registry) *MockMetrics_GetRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// IncCounter provides a mock function for the type MockMetrics
func (_mock *MockMetrics) IncCounter(name string) {
	_mock.Called(name)
	return
}

// MockMetrics_IncCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncCounter'
type MockMetrics_IncCounter_Call struct {
	*mock.Call
}

// IncCounter is a helper method to define mock.On call
//   - name string
func (_e *MockMetrics_Expecter) IncCounter(name interface{}) *MockMetrics_IncCounter_Call {
	return &MockMetrics_IncCounter_Call{Call: _e.mock.On("IncCounter", name)}
}

func (_c *MockMetrics_IncCounter_Call) Run(run func(name string)) *MockMetrics_IncCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetrics_IncCounter_Call) Return() *MockMetrics_IncCounter_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_IncCounter_Call) RunAndReturn(run func(name string)) *MockMetrics_IncCounter_Call {
	_c.Run(run)
	return _c
}

// IncCounterVec provides a mock function for the type MockMetrics
func (_mock *MockMetrics) IncCounterVec(name string, labels ...string) {
	if len(labels) > 0 {
		_mock.Called(name, labels)
	} else {
		_mock.Called(name)
	}

	return
}

// MockMetrics_IncCounterVec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncCounterVec'
type MockMetrics_IncCounterVec_Call struct {
	*mock.Call
}

// IncCounterVec is a helper method to define mock.On call
//   - name string
//   - labels ...string
func (_e *MockMetrics_Expecter) IncCounterVec(name interface{}, labels ...interface{}) *MockMetrics_IncCounterVec_Call {
	return &MockMetrics_IncCounterVec_Call{Call: _e.mock.On("IncCounterVec",
		append([]interface{}{name}, labels...)...)}
}

func (_c *MockMetrics_IncCounterVec_Call) Run(run func(name string, labels ...string)) *MockMetrics_IncCounterVec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []string
		var variadicArgs []string
		if len(args) > 1 {
			variadicArgs = args[1].([]string)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockMetrics_IncCounterVec_Call) Return() *MockMetrics_IncCounterVec_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_IncCounterVec_Call) RunAndReturn(run func(name string, labels ...string)) *MockMetrics_IncCounterVec_Call {
	_c.Run(run)
	return _c
}

// IncGauge provides a mock function for the type MockMetrics
func (_mock *MockMetrics) IncGauge(name string) {
	_mock.Called(name)
	return
}

// MockMetrics_IncGauge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncGauge'
type MockMetrics_IncGauge_Call struct {
	*mock.Call
}

// IncGauge is a helper method to define mock.On call
//   - name string
func (_e *MockMetrics_Expecter) IncGauge(name interface{}) *MockMetrics_IncGauge_Call {
	return &MockMetrics_IncGauge_Call{Call: _e.mock.On("IncGauge", name)}
}

func (_c *MockMetrics_IncGauge_Call) Run(run func(name string)) *MockMetrics_IncGauge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetrics_IncGauge_Call) Return() *MockMetrics_IncGauge_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_IncGauge_Call) RunAndReturn(run func(name string)) *MockMetrics_IncGauge_Call {
	_c.Run(run)
	return _c
}

// IncGaugeVec provides a mock function for the type MockMetrics
func (_mock *MockMetrics) IncGaugeVec(name string, labels ...string) {
	if len(labels) > 0 {
		_mock.Called(name, labels)
	} else {
		_mock.Called(name)
	}

	return
}

// MockMetrics_IncGaugeVec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncGaugeVec'
type MockMetrics_IncGaugeVec_Call struct {
	*mock.Call
}

// IncGaugeVec is a helper method to define mock.On call
//   - name string
//   - labels ...string
func (_e *MockMetrics_Expecter) IncGaugeVec(name interface{}, labels ...interface{}) *MockMetrics_IncGaugeVec_Call {
	return &MockMetrics_IncGaugeVec_Call{Call: _e.mock.On("IncGaugeVec",
		append([]interface{}{name}, labels...)...)}
}

func (_c *MockMetrics_IncGaugeVec_Call) Run(run func(name string, labels ...string)) *MockMetrics_IncGaugeVec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []string
		var variadicArgs []string
		if len(args) > 1 {
			variadicArgs = args[1].([]string)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockMetrics_IncGaugeVec_Call) Return() *MockMetrics_IncGaugeVec_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_IncGaugeVec_Call) RunAndReturn(run func(name string, labels ...string)) *MockMetrics_IncGaugeVec_Call {
	_c.Run(run)
	return _c
}

// ObserveHistogram provides a mock function for the type MockMetrics
func (_mock *MockMetrics) ObserveHistogram(name string, value float64) {
	_mock.Called(name, value)
	return
}

// MockMetrics_ObserveHistogram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObserveHistogram'
type MockMetrics_ObserveHistogram_Call struct {
	*mock.Call
}

// ObserveHistogram is a helper method to define mock.On call
//   - name string
//   - value float64
func (_e *MockMetrics_Expecter) ObserveHistogram(name interface{}, value interface{}) *MockMetrics_ObserveHistogram_Call {
	return &MockMetrics_ObserveHistogram_Call{Call: _e.mock.On("ObserveHistogram", name, value)}
}

func (_c *MockMetrics_ObserveHistogram_Call) Run(run func(name string, value float64)) *MockMetrics_ObserveHistogram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 float64
		if args[1] != nil {
			arg1 = args[1].(float64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetrics_ObserveHistogram_Call) Return() *MockMetrics_ObserveHistogram_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_ObserveHistogram_Call) RunAndReturn(run func(name string, value float64)) *MockMetrics_ObserveHistogram_Call {
	_c.Run(run)
	return _c
}

// ObserveHistogramVec provides a mock function for the type MockMetrics
func (_mock *MockMetrics) ObserveHistogramVec(name string, value float64, labels ...string) {
	if len(labels) > 0 {
		_mock.Called(name, value, labels)
	} else {
		_mock.Called(name, value)
	}

	return
}

// MockMetrics_ObserveHistogramVec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObserveHistogramVec'
type MockMetrics_ObserveHistogramVec_Call struct {
	*mock.Call
}

// ObserveHistogramVec is a helper method to define mock.On call
//   - name string
//   - value float64
//   - labels ...string
func (_e *MockMetrics_Expecter) ObserveHistogramVec(name interface{}, value interface{}, labels ...interface{}) *MockMetrics_ObserveHistogramVec_Call {
	return &MockMetrics_ObserveHistogramVec_Call{Call: _e.mock.On("ObserveHistogramVec",
		append([]interface{}{name, value}, labels...)...)}
}

func (_c *MockMetrics_ObserveHistogramVec_Call) Run(run func(name string, value float64, labels ...string)) *MockMetrics_ObserveHistogramVec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 float64
		if args[1] != nil {
			arg1 = args[1].(float64)
		}
		var arg2 []string
		var variadicArgs []string
		if len(args) > 2 {
			variadicArgs = args[2].([]string)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockMetrics_ObserveHistogramVec_Call) Return() *MockMetrics_ObserveHistogramVec_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_ObserveHistogramVec_Call) RunAndReturn(run func(name string, value float64, labels ...string)) *MockMetrics_ObserveHistogramVec_Call {
	_c.Run(run)
	return _c
}

// RegisterCounter provides a mock function for the type MockMetrics
func (_mock *MockMetrics) RegisterCounter(name string, help string) {
	_mock.Called(name, help)
	return
}

// MockMetrics_RegisterCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterCounter'
type MockMetrics_RegisterCounter_Call struct {
	*mock.Call
}

// RegisterCounter is a helper method to define mock.On call
//   - name string
//   - help string
func (_e *MockMetrics_Expecter) RegisterCounter(name interface{}, help interface{}) *MockMetrics_RegisterCounter_Call {
	return &MockMetrics_RegisterCounter_Call{Call: _e.mock.On("RegisterCounter", name, help)}
}

func (_c *MockMetrics_RegisterCounter_Call) Run(run func(name string, help string)) *MockMetrics_RegisterCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetrics_RegisterCounter_Call) Return() *MockMetrics_RegisterCounter_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_RegisterCounter_Call) RunAndReturn(run func(name string, help string)) *MockMetrics_RegisterCounter_Call {
	_c.Run(run)
	return _c
}

// RegisterCounterVec provides a mock function for the type MockMetrics
func (_mock *MockMetrics) RegisterCounterVec(name string, help string, labels []string) {
	_mock.Called(name, help, labels)
	return
}

// MockMetrics_RegisterCounterVec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterCounterVec'
type MockMetrics_RegisterCounterVec_Call struct {
	*mock.Call
}

// RegisterCounterVec is a helper method to define mock.On call
//   - name string
//   - help string
//   - labels []string
func (_e *MockMetrics_Expecter) RegisterCounterVec(name interface{}, help interface{}, labels interface{}) *MockMetrics_RegisterCounterVec_Call {
	return &MockMetrics_RegisterCounterVec_Call{Call: _e.mock.On("RegisterCounterVec", name, help, labels)}
}

func (_c *MockMetrics_RegisterCounterVec_Call) Run(run func(name string, help string, labels []string)) *MockMetrics_RegisterCounterVec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMetrics_RegisterCounterVec_Call) Return() *MockMetrics_RegisterCounterVec_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_RegisterCounterVec_Call) RunAndReturn(run func(name string, help string, labels []string)) *MockMetrics_RegisterCounterVec_Call {
	_c.Run(run)
	return _c
}

// RegisterGauge provides a mock function for the type MockMetrics
func (_mock *MockMetrics) RegisterGauge(name string, help string) {
	_mock.Called(name, help)
	return
}

// MockMetrics_RegisterGauge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterGauge'
type MockMetrics_RegisterGauge_Call struct {
	*mock.Call
}

// RegisterGauge is a helper method to define mock.On call
//   - name string
//   - help string
func (_e *MockMetrics_Expecter) RegisterGauge(name interface{}, help interface{}) *MockMetrics_RegisterGauge_Call {
	return &MockMetrics_RegisterGauge_Call{Call: _e.mock.On("RegisterGauge", name, help)}
}

func (_c *MockMetrics_RegisterGauge_Call) Run(run func(name string, help string)) *MockMetrics_RegisterGauge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetrics_RegisterGauge_Call) Return() *MockMetrics_RegisterGauge_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_RegisterGauge_Call) RunAndReturn(run func(name string, help string)) *MockMetrics_RegisterGauge_Call {
	_c.Run(run)
	return _c
}

// RegisterGaugeVec provides a mock function for the type MockMetrics
func (_mock *MockMetrics) RegisterGaugeVec(name string, help string, labels []string) {
	_mock.Called(name, help, labels)
	return
}

// MockMetrics_RegisterGaugeVec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterGaugeVec'
type MockMetrics_RegisterGaugeVec_Call struct {
	*mock.Call
}

// RegisterGaugeVec is a helper method to define mock.On call
//   - name string
//   - help string
//   - labels []string
func (_e *MockMetrics_Expecter) RegisterGaugeVec(name interface{}, help interface{}, labels interface{}) *MockMetrics_RegisterGaugeVec_Call {
	return &MockMetrics_RegisterGaugeVec_Call{Call: _e.mock.On("RegisterGaugeVec", name, help, labels)}
}

func (_c *MockMetrics_RegisterGaugeVec_Call) Run(run func(name string, help string, labels []string)) *MockMetrics_RegisterGaugeVec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMetrics_RegisterGaugeVec_Call) Return() *MockMetrics_RegisterGaugeVec_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_RegisterGaugeVec_Call) RunAndReturn(run func(name string, help string, labels []string)) *MockMetrics_RegisterGaugeVec_Call {
	_c.Run(run)
	return _c
}

// RegisterHistogram provides a mock function for the type MockMetrics
func (_mock *MockMetrics) RegisterHistogram(name string, help string, buckets []float64) {
	_mock.Called(name, help, buckets)
	return
}

// MockMetrics_RegisterHistogram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterHistogram'
type MockMetrics_RegisterHistogram_Call struct {
	*mock.Call
}

// RegisterHistogram is a helper method to define mock.On call
//   - name string
//   - help string
//   - buckets []float64
func (_e *MockMetrics_Expecter) RegisterHistogram(name interface{}, help interface{}, buckets interface{}) *MockMetrics_RegisterHistogram_Call {
	return &MockMetrics_RegisterHistogram_Call{Call: _e.mock.On("RegisterHistogram", name, help, buckets)}
}

func (_c *MockMetrics_RegisterHistogram_Call) Run(run func(name string, help string, buckets []float64)) *MockMetrics_RegisterHistogram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []float64
		if args[2] != nil {
			arg2 = args[2].([]float64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMetrics_RegisterHistogram_Call) Return() *MockMetrics_RegisterHistogram_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_RegisterHistogram_Call) RunAndReturn(run func(name string, help string, buckets []float64)) *MockMetrics_RegisterHistogram_Call {
	_c.Run(run)
	return _c
}

// RegisterHistogramVec provides a mock function for the type MockMetrics
func (_mock *MockMetrics) RegisterHistogramVec(name string, help string, buckets []float64, labels []string) {
	_mock.Called(name, help, buckets, labels)
	return
}

// MockMetrics_RegisterHistogramVec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterHistogramVec'
type MockMetrics_RegisterHistogramVec_Call struct {
	*mock.Call
}

// RegisterHistogramVec is a helper method to define mock.On call
//   - name string
//   - help string
//   - buckets []float64
//   - labels []string
func (_e *MockMetrics_Expecter) RegisterHistogramVec(name interface{}, help interface{}, buckets interface{}, labels interface{}) *MockMetrics_RegisterHistogramVec_Call {
	return &MockMetrics_RegisterHistogramVec_Call{Call: _e.mock.On("RegisterHistogramVec", name, help, buckets, labels)}
}

func (_c *MockMetrics_RegisterHistogramVec_Call) Run(run func(name string, help string, buckets []float64, labels []string)) *MockMetrics_RegisterHistogramVec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []float64
		if args[2] != nil {
			arg2 = args[2].([]float64)
		}
		var arg3 []string
		if args[3] != nil {
			arg3 = args[3].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockMetrics_RegisterHistogramVec_Call) Return() *MockMetrics_RegisterHistogramVec_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_RegisterHistogramVec_Call) RunAndReturn(run func(name string, help string, buckets []float64, labels []string)) *MockMetrics_RegisterHistogramVec_Call {
	_c.Run(run)
	return _c
}

// SetCurrentTimeGauge provides a mock function for the type MockMetrics
func (_mock *MockMetrics) SetCurrentTimeGauge(name string) {
	_mock.Called(name)
	return
}

// MockMetrics_SetCurrentTimeGauge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCurrentTimeGauge'
type MockMetrics_SetCurrentTimeGauge_Call struct {
	*mock.Call
}

// SetCurrentTimeGauge is a helper method to define mock.On call
//   - name string
func (_e *MockMetrics_Expecter) SetCurrentTimeGauge(name interface{}) *MockMetrics_SetCurrentTimeGauge_Call {
	return &MockMetrics_SetCurrentTimeGauge_Call{Call: _e.mock.On("SetCurrentTimeGauge", name)}
}

func (_c *MockMetrics_SetCurrentTimeGauge_Call) Run(run func(name string)) *MockMetrics_SetCurrentTimeGauge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetrics_SetCurrentTimeGauge_Call) Return() *MockMetrics_SetCurrentTimeGauge_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_SetCurrentTimeGauge_Call) RunAndReturn(run func(name string)) *MockMetrics_SetCurrentTimeGauge_Call {
	_c.Run(run)
	return _c
}

// SetGauge provides a mock function for the type MockMetrics
func (_mock *MockMetrics) SetGauge(name string, value float64) {
	_mock.Called(name, value)
	return
}

// MockMetrics_SetGauge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetGauge'
type MockMetrics_SetGauge_Call struct {
	*mock.Call
}

// SetGauge is a helper method to define mock.On call
//   - name string
//   - value float64
func (_e *MockMetrics_Expecter) SetGauge(name interface{}, value interface{}) *MockMetrics_SetGauge_Call {
	return &MockMetrics_SetGauge_Call{Call: _e.mock.On("SetGauge", name, value)}
}

func (_c *MockMetrics_SetGauge_Call) Run(run func(name string, value float64)) *MockMetrics_SetGauge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 float64
		if args[1] != nil {
			arg1 = args[1].(float64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetrics_SetGauge_Call) Return() *MockMetrics_SetGauge_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_SetGauge_Call) RunAndReturn(run func(name string, value float64)) *MockMetrics_SetGauge_Call {
	_c.Run(run)
	return _c
}

// SetGaugeVec provides a mock function for the type MockMetrics
func (_mock *MockMetrics) SetGaugeVec(name string, value float64, labels ...string) {
	if len(labels) > 0 {
		_mock.Called(name, value, labels)
	} else {
		_mock.Called(name, value)
	}

	return
}

// MockMetrics_SetGaugeVec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetGaugeVec'
type MockMetrics_SetGaugeVec_Call struct {
	*mock.Call
}

// SetGaugeVec is a helper method to define mock.On call
//   - name string
//   - value float64
//   - labels ...string
func (_e *MockMetrics_Expecter) SetGaugeVec(name interface{}, value interface{}, labels ...interface{}) *MockMetrics_SetGaugeVec_Call {
	return &MockMetrics_SetGaugeVec_Call{Call: _e.mock.On("SetGaugeVec",
		append([]interface{}{name, value}, labels...)...)}
}

func (_c *MockMetrics_SetGaugeVec_Call) Run(run func(name string, value float64, labels ...string)) *MockMetrics_SetGaugeVec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 float64
		if args[1] != nil {
			arg1 = args[1].(float64)
		}
		var arg2 []string
		var variadicArgs []string
		if len(args) > 2 {
			variadicArgs = args[2].([]string)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockMetrics_SetGaugeVec_Call) Return() *MockMetrics_SetGaugeVec_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_SetGaugeVec_Call) RunAndReturn(run func(name string, value float64, labels ...string)) *MockMetrics_SetGaugeVec_Call {
	_c.Run(run)
	return _c
}

// SubGauge provides a mock function for the type MockMetrics
func (_mock *MockMetrics) SubGauge(name string, value float64) {
	_mock.Called(name, value)
	return
}

// MockMetrics_SubGauge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubGauge'
type MockMetrics_SubGauge_Call struct {
	*mock.Call
}

// SubGauge is a helper method to define mock.On call
//   - name string
//   - value float64
func (_e *MockMetrics_Expecter) SubGauge(name interface{}, value interface{}) *MockMetrics_SubGauge_Call {
	return &MockMetrics_SubGauge_Call{Call: _e.mock.On("SubGauge", name, value)}
}

func (_c *MockMetrics_SubGauge_Call) Run(run func(name string, value float64)) *MockMetrics_SubGauge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 float64
		if args[1] != nil {
			arg1 = args[1].(float64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetrics_SubGauge_Call) Return() *MockMetrics_SubGauge_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_SubGauge_Call) RunAndReturn(run func(name string, value float64)) *MockMetrics_SubGauge_Call {
	_c.Run(run)
	return _c
}

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewMockServer creates a new instance of MockServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServer {
	mock := &MockServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServer is an autogenerated mock type for the Server type
type MockServer struct {
	mock.Mock
}

type MockServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServer) EXPECT() *MockServer_Expecter {
	return &MockServer_Expecter{mock: &_m.Mock}
}

// AddRoute provides a mock function for the type MockServer
func (_mock *MockServer) AddRoute(route string, handler func(w http.ResponseWriter, r *http.Request)) error {
	ret := _mock.Called(route, handler)

	if len(ret) == 0 {
		panic("no return value specified for AddRoute")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, func(w http.ResponseWriter, r *http.Request)) error); ok {
		r0 = returnFunc(route, handler)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockServer_AddRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRoute'
type MockServer_AddRoute_Call struct {
	*mock.Call
}

// AddRoute is a helper method to define mock.On call
//   - route string
//   - handler func(w http.ResponseWriter, r *http.Request)
func (_e *MockServer_Expecter) AddRoute(route interface{}, handler interface{}) *MockServer_AddRoute_Call {
	return &MockServer_AddRoute_Call{Call: _e.mock.On("AddRoute", route, handler)}
}

func (_c *MockServer_AddRoute_Call) Run(run func(route string, handler func(w http.ResponseWriter, r *http.Request))) *MockServer_AddRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 func(w http.ResponseWriter, r *http.Request)
		if args[1] != nil {
			arg1 = args[1].(func(w http.ResponseWriter, r *http.Request))
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServer_AddRoute_Call) Return(err error) *MockServer_AddRoute_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockServer_AddRoute_Call) RunAndReturn(run func(route string, handler func(w http.ResponseWriter, r *http.Request)) error) *MockServer_AddRoute_Call {
	_c.Call.Return(run)
	return _c
}

// ListenAndServe provides a mock function for the type MockServer
func (_mock *MockServer) ListenAndServe() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListenAndServe")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockServer_ListenAndServe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListenAndServe'
type MockServer_ListenAndServe_Call struct {
	*mock.Call
}

// ListenAndServe is a helper method to define mock.On call
func (_e *MockServer_Expecter) ListenAndServe() *MockServer_ListenAndServe_Call {
	return &MockServer_ListenAndServe_Call{Call: _e.mock.On("ListenAndServe")}
}

func (_c *MockServer_ListenAndServe_Call) Run(run func()) *MockServer_ListenAndServe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServer_ListenAndServe_Call) Return(err error) *MockServer_ListenAndServe_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockServer_ListenAndServe_Call) RunAndReturn(run func() error) *MockServer_ListenAndServe_Call {
	_c.Call.Return(run)
	return _c
}

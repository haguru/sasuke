// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/haguru/sasuke/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// AddUser provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) AddUser(ctx context.Context, user models.User) (string, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for AddUser")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.User) (string, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.User) string); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_AddUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUser'
type MockUserRepository_AddUser_Call struct {
	*mock.Call
}

// AddUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user models.User
func (_e *MockUserRepository_Expecter) AddUser(ctx interface{}, user interface{}) *MockUserRepository_AddUser_Call {
	return &MockUserRepository_AddUser_Call{Call: _e.mock.On("AddUser", ctx, user)}
}

func (_c *MockUserRepository_AddUser_Call) Run(run func(ctx context.Context, user models.User)) *MockUserRepository_AddUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 models.User
		if args[1] != nil {
			arg1 = args[1].(models.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepository_AddUser_Call) Return(s string, err error) *MockUserRepository_AddUser_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockUserRepository_AddUser_Call) RunAndReturn(run func(ctx context.Context, user models.User) (string, error)) *MockUserRepository_AddUser_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Close(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockUserRepository_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserRepository_Expecter) Close(ctx interface{}) *MockUserRepository_Close_Call {
	return &MockUserRepository_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *MockUserRepository_Close_Call) Run(run func(ctx context.Context)) *MockUserRepository_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserRepository_Close_Call) Return(err error) *MockUserRepository_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_Close_Call) RunAndReturn(run func(ctx context.Context) error) *MockUserRepository_Close_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureIndices provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) EnsureIndices(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for EnsureIndices")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_EnsureIndices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureIndices'
type MockUserRepository_EnsureIndices_Call struct {
	*mock.Call
}

// EnsureIndices is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserRepository_Expecter) EnsureIndices(ctx interface{}) *MockUserRepository_EnsureIndices_Call {
	return &MockUserRepository_EnsureIndices_Call{Call: _e.mock.On("EnsureIndices", ctx)}
}

func (_c *MockUserRepository_EnsureIndices_Call) Run(run func(ctx context.Context)) *MockUserRepository_EnsureIndices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserRepository_EnsureIndices_Call) Return(err error) *MockUserRepository_EnsureIndices_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_EnsureIndices_Call) RunAndReturn(run func(ctx context.Context) error) *MockUserRepository_EnsureIndices_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetUserByUsername(ctx context.Context, username string) (*models.User, error) {
	ret := _mock.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return returnFunc(ctx, username)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = returnFunc(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type MockUserRepository_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUserRepository_Expecter) GetUserByUsername(ctx interface{}, username interface{}) *MockUserRepository_GetUserByUsername_Call {
	return &MockUserRepository_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", ctx, username)}
}

func (_c *MockUserRepository_GetUserByUsername_Call) Run(run func(ctx context.Context, username string)) *MockUserRepository_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepository_GetUserByUsername_Call) Return(user *models.User, err error) *MockUserRepository_GetUserByUsername_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_GetUserByUsername_Call) RunAndReturn(run func(ctx context.Context, username string) (*models.User, error)) *MockUserRepository_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// AuthenticateUser provides a mock function for the type MockUserService
func (_mock *MockUserService) AuthenticateUser(ctx context.Context, username string, password string) (bool, error) {
	ret := _mock.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for AuthenticateUser")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return returnFunc(ctx, username, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = returnFunc(ctx, username, password)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_AuthenticateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthenticateUser'
type MockUserService_AuthenticateUser_Call struct {
	*mock.Call
}

// AuthenticateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
func (_e *MockUserService_Expecter) AuthenticateUser(ctx interface{}, username interface{}, password interface{}) *MockUserService_AuthenticateUser_Call {
	return &MockUserService_AuthenticateUser_Call{Call: _e.mock.On("AuthenticateUser", ctx, username, password)}
}

func (_c *MockUserService_AuthenticateUser_Call) Run(run func(ctx context.Context, username string, password string)) *MockUserService_AuthenticateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserService_AuthenticateUser_Call) Return(b bool, err error) *MockUserService_AuthenticateUser_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockUserService_AuthenticateUser_Call) RunAndReturn(run func(ctx context.Context, username string, password string) (bool, error)) *MockUserService_AuthenticateUser_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function for the type MockUserService
func (_mock *MockUserService) RegisterUser(ctx context.Context, username string, password string) (string, error) {
	ret := _mock.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return returnFunc(ctx, username, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = returnFunc(ctx, username, password)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type MockUserService_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
func (_e *MockUserService_Expecter) RegisterUser(ctx interface{}, username interface{}, password interface{}) *MockUserService_RegisterUser_Call {
	return &MockUserService_RegisterUser_Call{Call: _e.mock.On("RegisterUser", ctx, username, password)}
}

func (_c *MockUserService_RegisterUser_Call) Run(run func(ctx context.Context, username string, password string)) *MockUserService_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserService_RegisterUser_Call) Return(s string, err error) *MockUserService_RegisterUser_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockUserService_RegisterUser_Call) RunAndReturn(run func(ctx context.Context, username string, password string) (string, error)) *MockUserService_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}
